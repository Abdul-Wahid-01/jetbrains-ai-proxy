# .github/workflows/ci.yml

name: CI/CD Pipeline

# 触发工作流的事件
on:
  push:
    branches: ["main"]
    tags:
      - "v*"
  pull_request:
    branches: ["main"]

jobs:
  # 任务1：交叉编译所有平台的二进制文件
  build:
    name: Build Binaries
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # 定义交叉编译的目标平台
        include:
          - goos: linux
            goarch: amd64
          - goos: windows
            goarch: amd64
          - goos: linux
            goarch: arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24"

      - name: Build application
        run: |
          platform_id="${{ matrix.goos }}-${{ matrix.goarch }}"
          go build -v -o "dist/jetbrains-ai-proxy-${platform_id}" .
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0

      # 为每个平台上传名称唯一的产物
      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: binary-${{ matrix.goos }}-${{ matrix.goarch }}
          path: dist/

  # 任务2：构建并推送 Docker 镜像 (使用预编译的二进制文件)
  build-and-push-docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # 下载所有平台的二进制文件
      - name: Download all binaries
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      # 将所有二进制文件移动到统一的 dist 目录
      - name: Organize binaries
        run: |
          mkdir -p dist
          find artifacts -type f -name "jetbrains-ai-proxy-*" -exec mv {} dist/ \;

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}

      # 使用新的 Dockerfile.ci 和包含二进制文件的 dist 目录作为上下文
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile.ci
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  # 任务3：创建 Release
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write

    steps:
      # 下载所有平台的二进制文件
      - name: Download all binaries
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      # 将所有二进制文件移动到统一的 release-assets 目录
      - name: Organize binaries for release
        run: |
          mkdir -p release-assets
          find artifacts -type f -name "jetbrains-ai-proxy-*" -exec mv {} release-assets/ \;

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          files: release-assets/*
