# .github/workflows/ci.yml

name: CI/CD Pipeline

# 触发工作流的事件
on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  # 第一个任务：构建
  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # 定义交叉编译的目标平台
        include:
          - goos: linux
            goarch: amd64
          - goos: windows
            goarch: amd64
          - goos: linux
            goarch: arm64

    steps:
      # 1. 检出代码
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. 设置 Go 环境
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24"

      # 3. 交叉编译
      - name: Build application
        run: go build -v -o jetbrains-ai-proxy-${{ matrix.goos }}-${{ matrix.goarch }} .
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0 # 禁用 CGO 以获得静态链接的二进制文件

  # 第二个任务：构建并推送 Docker 镜像
  build-and-push-docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    # 依赖于 build 任务的成功
    needs: build
    # 仅在推送到 main 分支时运行
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      # 1. 检出代码
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. 设置 QEMU 以支持多平台构建
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # 3. 设置 Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 4. 登录到 GitHub Container Registry (ghcr.io)
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 5. 提取 Docker 元数据 (如标签)
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}

      # 6. 构建并推送 Docker 镜像
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          # 指定要构建的平台
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
